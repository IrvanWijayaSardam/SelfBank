// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/IrvanWijayaSardam/SelfBank/entity"
	mock "github.com/stretchr/testify/mock"
)

// DepositRepository is an autogenerated mock type for the DepositRepository type
type DepositRepository struct {
	mock.Mock
}

func NewDepositRepositoryTest() *DepositRepository {
    return &DepositRepository{}
}


// All provides a mock function with given fields: page, pageSize
func (_m *DepositRepository) All(page int, pageSize int) ([]entity.Deposit, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entity.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entity.Deposit, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entity.Deposit); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDepositByID provides a mock function with given fields: id
func (_m *DepositRepository) FindDepositByID(id uint64) *entity.Deposit {
	ret := _m.Called(id)

	var r0 *entity.Deposit
	if rf, ok := ret.Get(0).(func(uint64) *entity.Deposit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Deposit)
		}
	}

	return r0
}

// FindDepositByIDUser provides a mock function with given fields: id, page, pageSize
func (_m *DepositRepository) FindDepositByIDUser(id uint64, page int, pageSize int) ([]entity.Deposit, error) {
	ret := _m.Called(id, page, pageSize)

	var r0 []entity.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]entity.Deposit, error)); ok {
		return rf(id, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []entity.Deposit); ok {
		r0 = rf(id, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(id, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDeposit provides a mock function with given fields: brg
func (_m *DepositRepository) InsertDeposit(brg *entity.Deposit) entity.Deposit {
	ret := _m.Called(brg)

	var r0 entity.Deposit
	if rf, ok := ret.Get(0).(func(*entity.Deposit) entity.Deposit); ok {
		r0 = rf(brg)
	} else {
		r0 = ret.Get(0).(entity.Deposit)
	}

	return r0
}

// StorePaymentToken provides a mock function with given fields: transactionID, paymentToken, virtualAcc
func (_m *DepositRepository) StorePaymentToken(transactionID uint64, paymentToken string, virtualAcc string) error {
	ret := _m.Called(transactionID, paymentToken, virtualAcc)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string, string) error); ok {
		r0 = rf(transactionID, paymentToken, virtualAcc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TotalDeposit provides a mock function with given fields:
func (_m *DepositRepository) TotalDeposit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// TotalDepositByUserID provides a mock function with given fields: idUser
func (_m *DepositRepository) TotalDepositByUserID(idUser uint64) int64 {
	ret := _m.Called(idUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateDeposit provides a mock function with given fields: plg
func (_m *DepositRepository) UpdateDeposit(plg entity.Deposit) entity.Deposit {
	ret := _m.Called(plg)

	var r0 entity.Deposit
	if rf, ok := ret.Get(0).(func(entity.Deposit) entity.Deposit); ok {
		r0 = rf(plg)
	} else {
		r0 = ret.Get(0).(entity.Deposit)
	}

	return r0
}

// UpdateDepositStatus provides a mock function with given fields: id, newStatus
func (_m *DepositRepository) UpdateDepositStatus(id uint64, newStatus uint64) error {
	ret := _m.Called(id, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(id, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDepositRepository creates a new instance of DepositRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDepositRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DepositRepository {
	mock := &DepositRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
