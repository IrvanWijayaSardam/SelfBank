// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockJWTService is an autogenerated mock type for the MockJWTService type
type MockJWTService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: UserID, Email, Jk, Telephone, Name, IdRole, accountNumber
func (_m *MockJWTService) GenerateToken(UserID string, Email string, Jk string, Telephone string, Name string, IdRole uint64, accountNumber string) (string, error) {
	ret := _m.Called(UserID, Email, Jk, Telephone, Name, IdRole, accountNumber)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, uint64, string) (string, error)); ok {
		return rf(UserID, Email, Jk, Telephone, Name, IdRole, accountNumber)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, uint64, string) string); ok {
		r0 = rf(UserID, Email, Jk, Telephone, Name, IdRole, accountNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, uint64, string) error); ok {
		r1 = rf(UserID, Email, Jk, Telephone, Name, IdRole, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockJWTService) ValidateToken(token string) (*jwt.Token, error) {
	ret := _m.Called(token)

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockJWTService creates a new instance of MockJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTService {
	mock := &MockJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
