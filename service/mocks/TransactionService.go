// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	dto "github.com/IrvanWijayaSardam/SelfBank/dto"
	entity "github.com/IrvanWijayaSardam/SelfBank/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// All provides a mock function with given fields: page, pageSize
func (_m *TransactionService) All(page int, pageSize int) ([]entity.Transaction, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entity.Transaction, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entity.Transaction); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionByID provides a mock function with given fields: id
func (_m *TransactionService) FindTransactionByID(id uint64) *entity.Transaction {
	ret := _m.Called(id)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(uint64) *entity.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	return r0
}

// FindTransactionByIDUser provides a mock function with given fields: idUiser, int1, pageSize
func (_m *TransactionService) FindTransactionByIDUser(idUiser uint64, int1 int, pageSize int) ([]entity.Transaction, error) {
	ret := _m.Called(idUiser, int1, pageSize)

	var r0 []entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]entity.Transaction, error)); ok {
		return rf(idUiser, int1, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []entity.Transaction); ok {
		r0 = rf(idUiser, int1, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(idUiser, int1, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTransactionPDF provides a mock function with given fields: Transactions
func (_m *TransactionService) GenerateTransactionPDF(Transactions []entity.Transaction) (*bytes.Buffer, error) {
	ret := _m.Called(Transactions)

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func([]entity.Transaction) (*bytes.Buffer, error)); ok {
		return rf(Transactions)
	}
	if rf, ok := ret.Get(0).(func([]entity.Transaction) *bytes.Buffer); ok {
		r0 = rf(Transactions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func([]entity.Transaction) error); ok {
		r1 = rf(Transactions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTransaction provides a mock function with given fields: Transaction
func (_m *TransactionService) InsertTransaction(Transaction dto.TransactionDTO) entity.Transaction {
	ret := _m.Called(Transaction)

	var r0 entity.Transaction
	if rf, ok := ret.Get(0).(func(dto.TransactionDTO) entity.Transaction); ok {
		r0 = rf(Transaction)
	} else {
		r0 = ret.Get(0).(entity.Transaction)
	}

	return r0
}

// TotalTransaction provides a mock function with given fields:
func (_m *TransactionService) TotalTransaction() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// TotalTransactionByUserID provides a mock function with given fields: idUser
func (_m *TransactionService) TotalTransactionByUserID(idUser uint64) int64 {
	ret := _m.Called(idUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateTransactionStatus provides a mock function with given fields: orderID, newStatus
func (_m *TransactionService) UpdateTransactionStatus(orderID uint64, newStatus uint64) error {
	ret := _m.Called(orderID, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(orderID, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateAccNumber provides a mock function with given fields: accNumber
func (_m *TransactionService) ValidateAccNumber(accNumber uint64) bool {
	ret := _m.Called(accNumber)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(accNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
