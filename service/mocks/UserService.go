// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/IrvanWijayaSardam/SelfBank/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// FindUser provides a mock function with given fields: id
func (_m *UserService) FindUser(id uint64) entity.User {
	ret := _m.Called(id)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(uint64) entity.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	return r0
}

// GetSaldo provides a mock function with given fields: idUser
func (_m *UserService) GetSaldo(idUser uint64) int64 {
	ret := _m.Called(idUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserService) UpdateUser(user entity.User) entity.User {
	ret := _m.Called(user)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(entity.User) entity.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
