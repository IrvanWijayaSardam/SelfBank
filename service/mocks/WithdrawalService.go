// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/IrvanWijayaSardam/SelfBank/dto"
	entity "github.com/IrvanWijayaSardam/SelfBank/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// WithdrawalService is an autogenerated mock type for the WithdrawalService type
type WithdrawalService struct {
	mock.Mock
}

// All provides a mock function with given fields: page, pageSize
func (_m *WithdrawalService) All(page int, pageSize int) ([]entity.Withdrawal, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entity.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entity.Withdrawal, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entity.Withdrawal); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWithdrawalByID provides a mock function with given fields: id
func (_m *WithdrawalService) FindWithdrawalByID(id uint64) *entity.Withdrawal {
	ret := _m.Called(id)

	var r0 *entity.Withdrawal
	if rf, ok := ret.Get(0).(func(uint64) *entity.Withdrawal); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Withdrawal)
		}
	}

	return r0
}

// FindWithdrawalByIDUser provides a mock function with given fields: idUiser, int1, pageSize
func (_m *WithdrawalService) FindWithdrawalByIDUser(idUiser uint64, int1 int, pageSize int) ([]entity.Withdrawal, error) {
	ret := _m.Called(idUiser, int1, pageSize)

	var r0 []entity.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]entity.Withdrawal, error)); ok {
		return rf(idUiser, int1, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []entity.Withdrawal); ok {
		r0 = rf(idUiser, int1, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(idUiser, int1, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertWithdrawal provides a mock function with given fields: Withdrawal
func (_m *WithdrawalService) InsertWithdrawal(Withdrawal dto.WithdrawalDTO) entity.Withdrawal {
	ret := _m.Called(Withdrawal)

	var r0 entity.Withdrawal
	if rf, ok := ret.Get(0).(func(dto.WithdrawalDTO) entity.Withdrawal); ok {
		r0 = rf(Withdrawal)
	} else {
		r0 = ret.Get(0).(entity.Withdrawal)
	}

	return r0
}

// SaveFile provides a mock function with given fields: file
func (_m *WithdrawalService) SaveFile(file *multipart.FileHeader) (string, error) {
	ret := _m.Called(file)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) (string, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalWithdrawal provides a mock function with given fields:
func (_m *WithdrawalService) TotalWithdrawal() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// TotalWithdrawalByUserID provides a mock function with given fields: idUser
func (_m *WithdrawalService) TotalWithdrawalByUserID(idUser uint64) int64 {
	ret := _m.Called(idUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateWithdrawalStatus provides a mock function with given fields: orderID, newStatus
func (_m *WithdrawalService) UpdateWithdrawalStatus(orderID uint64, newStatus uint64) error {
	ret := _m.Called(orderID, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(orderID, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWithdrawalService creates a new instance of WithdrawalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawalService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawalService {
	mock := &WithdrawalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
