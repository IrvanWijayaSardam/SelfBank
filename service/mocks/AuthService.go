// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/IrvanWijayaSardam/SelfBank/dto"
	entity "github.com/IrvanWijayaSardam/SelfBank/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *AuthService) CreateUser(user dto.RegisterDTO) entity.User {
	ret := _m.Called(user)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(dto.RegisterDTO) entity.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *AuthService) FindByEmail(email string) entity.User {
	ret := _m.Called(email)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	return r0
}

// IsDuplicateEmail provides a mock function with given fields: email
func (_m *AuthService) IsDuplicateEmail(email string) bool {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// VerifyCredential provides a mock function with given fields: email, password
func (_m *AuthService) VerifyCredential(email string, password string) interface{} {
	ret := _m.Called(email, password)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
