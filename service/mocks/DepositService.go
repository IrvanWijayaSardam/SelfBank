// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/IrvanWijayaSardam/SelfBank/dto"
	entity "github.com/IrvanWijayaSardam/SelfBank/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// MockDepositService is an autogenerated mock type for the MockDepositService type
type MockDepositService struct {
	mock.Mock
}

// All provides a mock function with given fields: page, pageSize
func (_m *MockDepositService) All(page int, pageSize int) ([]entity.Deposit, error) {
	ret := _m.Called(page, pageSize)

	var r0 []entity.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entity.Deposit, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entity.Deposit); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDepositByID provides a mock function with given fields: id
func (_m *MockDepositService) FindDepositByID(id string) *entity.Deposit {
	ret := _m.Called(id)

	var r0 *entity.Deposit
	if rf, ok := ret.Get(0).(func(string) *entity.Deposit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Deposit)
		}
	}

	return r0
}

// FindDepositByIDUser provides a mock function with given fields: idUser, int1, pageSize
func (_m *MockDepositService) FindDepositByIDUser(idUser uint64, int1 int, pageSize int) ([]entity.Deposit, error) {
	ret := _m.Called(idUser, int1, pageSize)

	var r0 []entity.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]entity.Deposit, error)); ok {
		return rf(idUser, int1, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []entity.Deposit); ok {
		r0 = rf(idUser, int1, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(idUser, int1, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDeposit provides a mock function with given fields: Deposit
func (_m *MockDepositService) InsertDeposit(Deposit dto.DepositDTO) entity.Deposit {
	ret := _m.Called(Deposit)

	var r0 entity.Deposit
	if rf, ok := ret.Get(0).(func(dto.DepositDTO) entity.Deposit); ok {
		r0 = rf(Deposit)
	} else {
		r0 = ret.Get(0).(entity.Deposit)
	}

	return r0
}

// InsertPaymentToken provides a mock function with given fields: transactionID, paymentToken, virtualAcc, callbackUrl
func (_m *MockDepositService) InsertPaymentToken(transactionID string, paymentToken string, virtualAcc string, callbackUrl string) error {
	ret := _m.Called(transactionID, paymentToken, virtualAcc, callbackUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(transactionID, paymentToken, virtualAcc, callbackUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveFile provides a mock function with given fields: file
func (_m *MockDepositService) SaveFile(file *multipart.FileHeader) (string, error) {
	ret := _m.Called(file)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) (string, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalDeposit provides a mock function with given fields:
func (_m *MockDepositService) TotalDeposit() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// TotalDepositByUserID provides a mock function with given fields: idUser
func (_m *MockDepositService) TotalDepositByUserID(idUser uint64) int64 {
	ret := _m.Called(idUser)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateDepositStatus provides a mock function with given fields: orderID, newStatus
func (_m *MockDepositService) UpdateDepositStatus(orderID string, newStatus uint64) error {
	ret := _m.Called(orderID, newStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(orderID, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDepositService creates a new instance of MockDepositService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDepositService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDepositService {
	mock := &MockDepositService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
